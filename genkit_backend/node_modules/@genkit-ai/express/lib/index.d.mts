import bodyParser from 'body-parser';
import { CorsOptions } from 'cors';
import express from 'express';
import { ActionContext, z, Action, Flow } from 'genkit';
import { ContextProvider } from 'genkit/context';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Exposes provided flow or an action as express handler.
 */
declare function expressHandler<C extends ActionContext = ActionContext, I extends z.ZodTypeAny = z.ZodTypeAny, O extends z.ZodTypeAny = z.ZodTypeAny, S extends z.ZodTypeAny = z.ZodTypeAny>(action: Action<I, O, S>, opts?: {
    contextProvider?: ContextProvider<C, I>;
}): express.RequestHandler;
/**
 * A wrapper object containing a flow with its associated auth policy.
 */
type FlowWithContextProvider<C extends ActionContext = ActionContext, I extends z.ZodTypeAny = z.ZodTypeAny, O extends z.ZodTypeAny = z.ZodTypeAny, S extends z.ZodTypeAny = z.ZodTypeAny> = {
    flow: Flow<I, O, S>;
    context: ContextProvider<C, I>;
};
/**
 * Adds an auth policy to the flow.
 */
declare function withContextProvider<C extends ActionContext = ActionContext, I extends z.ZodTypeAny = z.ZodTypeAny, O extends z.ZodTypeAny = z.ZodTypeAny, S extends z.ZodTypeAny = z.ZodTypeAny>(flow: Flow<I, O, S>, context: ContextProvider<C, I>): FlowWithContextProvider<C, I, O, S>;
/**
 * Options to configure the flow server.
 */
interface FlowServerOptions {
    /** List of flows to expose via the flow server. */
    flows: (Flow<any, any, any> | FlowWithContextProvider<any, any, any>)[];
    /** Port to run the server on. Defaults to env.PORT or 3400. */
    port?: number;
    /** CORS options for the server. */
    cors?: CorsOptions;
    /** HTTP method path prefix for the exposed flows. */
    pathPrefix?: string;
    /** JSON body parser options. */
    jsonParserOptions?: bodyParser.OptionsJson;
}
/**
 * Starts an express server with the provided flows and options.
 */
declare function startFlowServer(options: FlowServerOptions): FlowServer;
/**
 * Flow server exposes registered flows as HTTP endpoints.
 *
 * This is for use in production environments.
 *
 * @hidden
 */
declare class FlowServer {
    /** List of all running servers needed to be cleaned up on process exit. */
    private static RUNNING_SERVERS;
    /** Options for the flow server configured by the developer. */
    private options;
    /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null is server is not running. */
    private port;
    /** Express server instance. Null if server is not running. */
    private server;
    constructor(options: FlowServerOptions);
    /**
     * Starts the server and adds it to the list of running servers to clean up on exit.
     */
    start(): Promise<void>;
    /**
     * Stops the server and removes it from the list of running servers to clean up on exit.
     */
    stop(): Promise<void>;
    /**
     * Stops all running servers.
     */
    static stopAll(): Promise<void[]>;
}

export { FlowServer, type FlowServerOptions, type FlowWithContextProvider, expressHandler, startFlowServer, withContextProvider };
